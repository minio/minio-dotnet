/*
 * MinIO .NET Library for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;

namespace Minio.DataModel;

/// <summary>
///     Stores raw json events generated by ListenBucketNotifications
///     The Minio client doesn't depend on a JSON library so we can let
///     the caller use a library of their choice
/// </summary>
public class MinioNotificationRaw
{
    public string json;

    public MinioNotificationRaw(string json)
    {
        this.json = json;
    }
}

/// <summary>
///     Helper class to deserialize notifications generated
///     from MinioNotificaitonRaw by ListenBucketNotifications
/// </summary>
[Serializable]
public class MinioNotification
{
    public string Err { get; set; }

    [SuppressMessage("Design", "MA0016:Prefer returning collection abstraction instead of implementation",
        Justification = "Needs to be concrete type for XML deserialization")]
    public Collection<NotificationEvent> Records { get; set; }
}

public class NotificationEvent
{
    [JsonPropertyName("awsRegion")] public string AwsRegion { get; set; }

    [JsonPropertyName("eventName")] public string EventName { get; set; }

    [JsonPropertyName("eventSource")] public string EventSource { get; set; }

    [JsonPropertyName("eventTime")] public string EventTime { get; set; }

    [JsonPropertyName("eventVersion")] public string EventVersion { get; set; }

    [JsonPropertyName("requestParameters")]
    [SuppressMessage("Design", "MA0016:Prefer returning collection abstraction instead of implementation",
        Justification = "Needs to be concrete type for XML deserialization")]
    public Dictionary<string, string> RequestParameters { get; set; }

    [JsonPropertyName("responseElements")]
    [SuppressMessage("Design", "MA0016:Prefer returning collection abstraction instead of implementation",
        Justification = "Needs to be concrete type for XML deserialization")]
    public Dictionary<string, string> ResponseElements { get; set; }

    [JsonPropertyName("s3")] public EventMeta S3 { get; set; }

    [JsonPropertyName("source")] public SourceInfo Source { get; set; }

    [JsonPropertyName("userIdentity")] public Identity UserIdentity { get; set; }
}

[DataContract]
public class EventMeta
{
    [DataMember]
    [JsonPropertyName("bucket")]
    public BucketMeta Bucket { get; set; }

    [DataMember]
    [JsonPropertyName("configurationId")]
    public string ConfigurationId { get; set; }

    [DataMember(Name = "object")]
    [JsonPropertyName("object")]
    public ObjectMeta ObjectMeta { get; set; } // C# won't allow the keyword 'object' as a name

    [DataMember]
    [JsonPropertyName("schemaVersion")]
    public string SchemaVersion { get; set; }
}

public class ObjectMeta
{
    [JsonPropertyName("contentType")] public string ContentType { get; set; }

    [JsonPropertyName("etag")] public string Etag { get; set; }

    [JsonPropertyName("key")] public string Key { get; set; }

    [JsonPropertyName("sequencer")] public string Sequencer { get; set; }

    [JsonPropertyName("size")] public int Size { get; set; }

    [JsonPropertyName("userMetadata")]
    [SuppressMessage("Design", "MA0016:Prefer returning collection abstraction instead of implementation",
        Justification = "Needs to be concrete type for XML deserialization")]
    public Dictionary<string, string> UserMetadata { get; set; }

    [JsonPropertyName("versionId")] public string VersionId { get; set; }
}

public class BucketMeta
{
    [JsonPropertyName("arn")] public string Arn { get; set; }

    [JsonPropertyName("name")] public string Name { get; set; }

    [JsonPropertyName("ownerIdentity")] public Identity OwnerIdentity { get; set; }
}

public class Identity
{
    [JsonPropertyName("principalId")] public string PrincipalId { get; set; }
}

public class SourceInfo
{
    [JsonPropertyName("host")] public string Host { get; set; }

    [JsonPropertyName("port")] public string Port { get; set; }

    [JsonPropertyName("userAgent")] public string UserAgent { get; set; }
}